# OASIS_START
# DO NOT EDIT (digest: 5edfa7298450d5781b971359fa4996c6)
# Ignore VCS directories, you can use the same kind of rule outside
# OASIS_START/STOP if you want to exclude directories that contains
# useless stuff for the build process
true: annot, bin_annot
<**/.svn>: -traverse
<**/.svn>: not_hygienic
".bzr": -traverse
".bzr": not_hygienic
".hg": -traverse
".hg": not_hygienic
".git": -traverse
".git": not_hygienic
"_darcs": -traverse
"_darcs": not_hygienic
# Library lacaml
"lib/lacaml.cmxs": use_lacaml
<lib/*.ml{,i,y}>: oasis_library_lacaml_ccopt
"lib/impl_c.c": oasis_library_lacaml_ccopt
"lib/utils_c.c": oasis_library_lacaml_ccopt
"lib/vec2_S_c.c": oasis_library_lacaml_ccopt
"lib/vec2_D_c.c": oasis_library_lacaml_ccopt
"lib/vec2_C_c.c": oasis_library_lacaml_ccopt
"lib/vec2_Z_c.c": oasis_library_lacaml_ccopt
"lib/vec4_S_c.c": oasis_library_lacaml_ccopt
"lib/vec4_D_c.c": oasis_library_lacaml_ccopt
"lib/vec4_C_c.c": oasis_library_lacaml_ccopt
"lib/vec4_Z_c.c": oasis_library_lacaml_ccopt
"lib/mat2_S_c.c": oasis_library_lacaml_ccopt
"lib/mat2_D_c.c": oasis_library_lacaml_ccopt
"lib/mat2_C_c.c": oasis_library_lacaml_ccopt
"lib/mat2_Z_c.c": oasis_library_lacaml_ccopt
"lib/mat4_S_c.c": oasis_library_lacaml_ccopt
"lib/mat4_D_c.c": oasis_library_lacaml_ccopt
"lib/mat4_C_c.c": oasis_library_lacaml_ccopt
"lib/mat4_Z_c.c": oasis_library_lacaml_ccopt
"lib/impl2_S_c.c": oasis_library_lacaml_ccopt
"lib/impl2_D_c.c": oasis_library_lacaml_ccopt
"lib/impl2_C_c.c": oasis_library_lacaml_ccopt
"lib/impl2_Z_c.c": oasis_library_lacaml_ccopt
"lib/impl4_S_c.c": oasis_library_lacaml_ccopt
"lib/impl4_D_c.c": oasis_library_lacaml_ccopt
"lib/impl4_C_c.c": oasis_library_lacaml_ccopt
"lib/impl4_Z_c.c": oasis_library_lacaml_ccopt
"lib/exp10.c": oasis_library_lacaml_ccopt
<lib/lacaml.{cma,cmxa}>: oasis_library_lacaml_cclib
"lib/liblacaml_stubs.lib": oasis_library_lacaml_cclib
"lib/dlllacaml_stubs.dll": oasis_library_lacaml_cclib
"lib/liblacaml_stubs.a": oasis_library_lacaml_cclib
"lib/dlllacaml_stubs.so": oasis_library_lacaml_cclib
<lib/lacaml.{cma,cmxa}>: use_liblacaml_stubs
<lib/*.ml{,i,y}>: pkg_bigarray
<lib/*.ml{,i,y}>: pkg_bytes
"lib/impl_c.c": pkg_bigarray
"lib/impl_c.c": pkg_bytes
"lib/utils_c.c": pkg_bigarray
"lib/utils_c.c": pkg_bytes
"lib/vec2_S_c.c": pkg_bigarray
"lib/vec2_S_c.c": pkg_bytes
"lib/vec2_D_c.c": pkg_bigarray
"lib/vec2_D_c.c": pkg_bytes
"lib/vec2_C_c.c": pkg_bigarray
"lib/vec2_C_c.c": pkg_bytes
"lib/vec2_Z_c.c": pkg_bigarray
"lib/vec2_Z_c.c": pkg_bytes
"lib/vec4_S_c.c": pkg_bigarray
"lib/vec4_S_c.c": pkg_bytes
"lib/vec4_D_c.c": pkg_bigarray
"lib/vec4_D_c.c": pkg_bytes
"lib/vec4_C_c.c": pkg_bigarray
"lib/vec4_C_c.c": pkg_bytes
"lib/vec4_Z_c.c": pkg_bigarray
"lib/vec4_Z_c.c": pkg_bytes
"lib/mat2_S_c.c": pkg_bigarray
"lib/mat2_S_c.c": pkg_bytes
"lib/mat2_D_c.c": pkg_bigarray
"lib/mat2_D_c.c": pkg_bytes
"lib/mat2_C_c.c": pkg_bigarray
"lib/mat2_C_c.c": pkg_bytes
"lib/mat2_Z_c.c": pkg_bigarray
"lib/mat2_Z_c.c": pkg_bytes
"lib/mat4_S_c.c": pkg_bigarray
"lib/mat4_S_c.c": pkg_bytes
"lib/mat4_D_c.c": pkg_bigarray
"lib/mat4_D_c.c": pkg_bytes
"lib/mat4_C_c.c": pkg_bigarray
"lib/mat4_C_c.c": pkg_bytes
"lib/mat4_Z_c.c": pkg_bigarray
"lib/mat4_Z_c.c": pkg_bytes
"lib/impl2_S_c.c": pkg_bigarray
"lib/impl2_S_c.c": pkg_bytes
"lib/impl2_D_c.c": pkg_bigarray
"lib/impl2_D_c.c": pkg_bytes
"lib/impl2_C_c.c": pkg_bigarray
"lib/impl2_C_c.c": pkg_bytes
"lib/impl2_Z_c.c": pkg_bigarray
"lib/impl2_Z_c.c": pkg_bytes
"lib/impl4_S_c.c": pkg_bigarray
"lib/impl4_S_c.c": pkg_bytes
"lib/impl4_D_c.c": pkg_bigarray
"lib/impl4_D_c.c": pkg_bytes
"lib/impl4_C_c.c": pkg_bigarray
"lib/impl4_C_c.c": pkg_bytes
"lib/impl4_Z_c.c": pkg_bigarray
"lib/impl4_Z_c.c": pkg_bytes
"lib/exp10.c": pkg_bigarray
"lib/exp10.c": pkg_bytes
# Library lacaml_top
"lib/lacaml_top.cmxs": use_lacaml_top
# Executable blas
<examples/blas/blas.{native,byte}>: pkg_bigarray
<examples/blas/blas.{native,byte}>: pkg_bytes
<examples/blas/blas.{native,byte}>: use_lacaml
<examples/blas/*.ml{,i,y}>: pkg_bigarray
<examples/blas/*.ml{,i,y}>: pkg_bytes
<examples/blas/*.ml{,i,y}>: use_lacaml
# Executable eig
<examples/eig/eig.{native,byte}>: pkg_bigarray
<examples/eig/eig.{native,byte}>: pkg_bytes
<examples/eig/eig.{native,byte}>: use_lacaml
# Executable sbev
<examples/eig/sbev.{native,byte}>: pkg_bigarray
<examples/eig/sbev.{native,byte}>: pkg_bytes
<examples/eig/sbev.{native,byte}>: use_lacaml
# Executable sbgv
<examples/eig/sbgv.{native,byte}>: pkg_bigarray
<examples/eig/sbgv.{native,byte}>: pkg_bytes
<examples/eig/sbgv.{native,byte}>: use_lacaml
<examples/eig/*.ml{,i,y}>: pkg_bigarray
<examples/eig/*.ml{,i,y}>: pkg_bytes
<examples/eig/*.ml{,i,y}>: use_lacaml
# Executable lin_eq
<examples/lin_eq/lin_eq.{native,byte}>: pkg_bigarray
<examples/lin_eq/lin_eq.{native,byte}>: pkg_bytes
<examples/lin_eq/lin_eq.{native,byte}>: use_lacaml
# Executable gbsv
<examples/lin_eq/gbsv.{native,byte}>: pkg_bigarray
<examples/lin_eq/gbsv.{native,byte}>: pkg_bytes
<examples/lin_eq/gbsv.{native,byte}>: use_lacaml
<examples/lin_eq/*.ml{,i,y}>: pkg_bigarray
<examples/lin_eq/*.ml{,i,y}>: pkg_bytes
<examples/lin_eq/*.ml{,i,y}>: use_lacaml
# Executable lin_eq_comp
<examples/lin_eq_comp/lin_eq_comp.{native,byte}>: pkg_bigarray
<examples/lin_eq_comp/lin_eq_comp.{native,byte}>: pkg_bytes
<examples/lin_eq_comp/lin_eq_comp.{native,byte}>: use_lacaml
<examples/lin_eq_comp/*.ml{,i,y}>: pkg_bigarray
<examples/lin_eq_comp/*.ml{,i,y}>: pkg_bytes
<examples/lin_eq_comp/*.ml{,i,y}>: use_lacaml
# Executable lin_reg
<examples/lin_reg/lin_reg.{native,byte}>: pkg_bigarray
<examples/lin_reg/lin_reg.{native,byte}>: pkg_bytes
<examples/lin_reg/lin_reg.{native,byte}>: use_lacaml
<examples/lin_reg/*.ml{,i,y}>: pkg_bigarray
<examples/lin_reg/*.ml{,i,y}>: pkg_bytes
<examples/lin_reg/*.ml{,i,y}>: use_lacaml
# Executable qr
<examples/qr/qr.{native,byte}>: pkg_bigarray
<examples/qr/qr.{native,byte}>: pkg_bytes
<examples/qr/qr.{native,byte}>: use_lacaml
<examples/qr/*.ml{,i,y}>: pkg_bigarray
<examples/qr/*.ml{,i,y}>: pkg_bytes
<examples/qr/*.ml{,i,y}>: use_lacaml
# Executable svd
<examples/svd/svd.{native,byte}>: pkg_bigarray
<examples/svd/svd.{native,byte}>: pkg_bytes
<examples/svd/svd.{native,byte}>: use_lacaml
<examples/svd/*.ml{,i,y}>: pkg_bigarray
<examples/svd/*.ml{,i,y}>: pkg_bytes
<examples/svd/*.ml{,i,y}>: use_lacaml
# Executable nag_gbsv
<examples/nag/nag_gbsv.{native,byte}>: pkg_bigarray
<examples/nag/nag_gbsv.{native,byte}>: pkg_bytes
<examples/nag/nag_gbsv.{native,byte}>: use_lacaml
# Executable nag_gesv
<examples/nag/nag_gesv.{native,byte}>: pkg_bigarray
<examples/nag/nag_gesv.{native,byte}>: pkg_bytes
<examples/nag/nag_gesv.{native,byte}>: use_lacaml
# Executable nag_gtsv
<examples/nag/nag_gtsv.{native,byte}>: pkg_bigarray
<examples/nag/nag_gtsv.{native,byte}>: pkg_bytes
<examples/nag/nag_gtsv.{native,byte}>: use_lacaml
# Executable nag_pbsv
<examples/nag/nag_pbsv.{native,byte}>: pkg_bigarray
<examples/nag/nag_pbsv.{native,byte}>: pkg_bytes
<examples/nag/nag_pbsv.{native,byte}>: use_lacaml
# Executable nag_posv
<examples/nag/nag_posv.{native,byte}>: pkg_bigarray
<examples/nag/nag_posv.{native,byte}>: pkg_bytes
<examples/nag/nag_posv.{native,byte}>: use_lacaml
# Executable nag_ppsv
<examples/nag/nag_ppsv.{native,byte}>: pkg_bigarray
<examples/nag/nag_ppsv.{native,byte}>: pkg_bytes
<examples/nag/nag_ppsv.{native,byte}>: use_lacaml
# Executable nag_ptsv
<examples/nag/nag_ptsv.{native,byte}>: pkg_bigarray
<examples/nag/nag_ptsv.{native,byte}>: pkg_bytes
<examples/nag/nag_ptsv.{native,byte}>: use_lacaml
# Executable nag_spsv
<examples/nag/nag_spsv.{native,byte}>: pkg_bigarray
<examples/nag/nag_spsv.{native,byte}>: pkg_bytes
<examples/nag/nag_spsv.{native,byte}>: use_lacaml
# Executable nag_sysv
<examples/nag/nag_sysv.{native,byte}>: pkg_bigarray
<examples/nag/nag_sysv.{native,byte}>: pkg_bytes
<examples/nag/nag_sysv.{native,byte}>: use_lacaml
<examples/nag/*.ml{,i,y}>: pkg_bigarray
<examples/nag/*.ml{,i,y}>: pkg_bytes
<examples/nag/*.ml{,i,y}>: use_lacaml
# Executable schur_real
<examples/schur/schur_real.{native,byte}>: pkg_bigarray
<examples/schur/schur_real.{native,byte}>: pkg_bytes
<examples/schur/schur_real.{native,byte}>: use_lacaml
# Executable schur_complex
<examples/schur/schur_complex.{native,byte}>: pkg_bigarray
<examples/schur/schur_complex.{native,byte}>: pkg_bytes
<examples/schur/schur_complex.{native,byte}>: use_lacaml
<examples/schur/*.ml{,i,y}>: pkg_bigarray
<examples/schur/*.ml{,i,y}>: pkg_bytes
<examples/schur/*.ml{,i,y}>: use_lacaml
# Executable shuffle
<examples/shuffle/shuffle.{native,byte}>: pkg_bigarray
<examples/shuffle/shuffle.{native,byte}>: pkg_bytes
<examples/shuffle/shuffle.{native,byte}>: use_lacaml
<examples/shuffle/*.ml{,i,y}>: pkg_bigarray
<examples/shuffle/*.ml{,i,y}>: pkg_bytes
<examples/shuffle/*.ml{,i,y}>: use_lacaml
# OASIS_STOP

true: -traverse
<{lib,examples}/**>: traverse

<**/*.ml{,i}>: warn(Aer-44), strict_sequence, safe_string, annot

<lib/install_printers.ml>: I(+compiler-libs)

"lib/lacaml.cmxs": use_liblacaml_stubs
<**/*>: no_alias_deps
